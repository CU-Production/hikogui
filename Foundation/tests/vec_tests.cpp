// Copyright 2020 Pokitec
// All rights reserved.

#include "TTauri/Foundation/vec.hpp"
#include "TTauri/Foundation/required.hpp"
#include <gtest/gtest.h>
#include <iostream>

using namespace std;
using namespace TTauri;

TEST(Vec, Compare) {
    let tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    ASSERT_FALSE(tmp == vec(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_FALSE(tmp == vec(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_TRUE(tmp == vec(2.0f, 3.0f, 4.0f, 5.0f));
}

TEST(Vec, Arithmatic) {
    let tmp1 = vec{9.0f, 6.0f, 4.0f, 14.0f};
    let tmp2 = vec{3.0f, -2.0f, 8.0f, 7.0f};

    ASSERT_EQ(tmp1 + tmp2, vec(12.0f, 4.0f, 12.0f, 21.0f));
    ASSERT_EQ(tmp1 - tmp2, vec(6.0f, 8.0f, -4.0f, 7.0f));
    ASSERT_EQ(tmp1 * tmp2, vec(27.0f, -12.0f, 32.0f, 98.0f));
    ASSERT_EQ(tmp1 / tmp2, vec(3.0f, -3.0f, 0.5f, 2.0f));

    {
        auto tmp = tmp1;
        tmp += tmp2;
        ASSERT_EQ(tmp, vec(12.0f, 4.0f, 12.0f, 21.0f));
    }

    {
        auto tmp = tmp1;
        tmp -= tmp2;
        ASSERT_EQ(tmp, vec(6.0f, 8.0f, -4.0f, 7.0f));
    }

    {
        auto tmp = tmp1;
        tmp *= tmp2;
        ASSERT_EQ(tmp, vec(27.0f, -12.0f, 32.0f, 98.0f));
    }

    {
        auto tmp = tmp1;
        tmp /= tmp2;
        ASSERT_EQ(tmp, vec(3.0f, -3.0f, 0.5f, 2.0f));
    }
}

TEST(Vec, Length) {
    let tmp = vec(2.0f, 3.0f, 4.0f, 0.0f);

    ASSERT_EQ(length_squared(tmp), 29.0f);
    ASSERT_NEAR(length(tmp), 5.3851f, 0.001f);
}

TEST(Vec, DotProduct) {
    let a = vec(1.0f, 3.0f, -5.0f, 0.0f);
    let b = vec(4.0f, -2.0f, -1.0f, 0.0f);

    ASSERT_EQ(dot(a, b), 3.0f);
}

TEST(Vec, CrossProduct) {
    let a = vec(2.0f, 3.0f, 4.0f, 0.0f);
    let b = vec(5.0f, 6.0f, 7.0f, 0.0f);

    ASSERT_EQ(cross(a, b), vec(-3.0f, 6.0f, -3.0f));
}

TEST(Vec, Getters) {
    let tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    ASSERT_EQ(tmp.x(), 2.0f);
    ASSERT_EQ(tmp.y(), 3.0f);
    ASSERT_EQ(tmp.z(), 4.0f);
    ASSERT_EQ(tmp.w(), 5.0f);
    ASSERT_EQ(tmp.r(), 2.0f);
    ASSERT_EQ(tmp.g(), 3.0f);
    ASSERT_EQ(tmp.b(), 4.0f);
    ASSERT_EQ(tmp.a(), 5.0f);
    ASSERT_EQ(tmp[0], 2.0f);
    ASSERT_EQ(tmp[1], 3.0f);
    ASSERT_EQ(tmp[2], 4.0f);
    ASSERT_EQ(tmp[3], 5.0f);

}

TEST(Vec, Setters) {
    auto tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    ASSERT_EQ(tmp.x(12.0f), vec(12.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y(13.0f), vec(12.0f, 13.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z(14.0f), vec(12.0f, 13.0f, 14.0f, 5.0f));
    ASSERT_EQ(tmp.w(15.0f), vec(12.0f, 13.0f, 14.0f, 15.0f));
    ASSERT_EQ(tmp.r(22.0f), vec(22.0f, 13.0f, 14.0f, 15.0f));
    ASSERT_EQ(tmp.g(23.0f), vec(22.0f, 23.0f, 14.0f, 15.0f));
    ASSERT_EQ(tmp.b(24.0f), vec(22.0f, 23.0f, 24.0f, 15.0f));
    ASSERT_EQ(tmp.a(25.0f), vec(22.0f, 23.0f, 24.0f, 25.0f));
}


TEST(Vec, Swizzle2) {
    let tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a homgenious 2D vector, z==0.0, w==w.
    ASSERT_EQ(tmp.xx(), vec(2.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xy(), vec(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xz(), vec(2.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xw(), vec(2.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x0(), vec(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x1(), vec(2.0f, 1.0f, 0.0f, 5.0f));

    ASSERT_EQ(tmp.yx(), vec(3.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yy(), vec(3.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yz(), vec(3.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yw(), vec(3.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y0(), vec(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y1(), vec(3.0f, 1.0f, 0.0f, 5.0f));

    ASSERT_EQ(tmp.zx(), vec(4.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zy(), vec(4.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zz(), vec(4.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zw(), vec(4.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z0(), vec(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z1(), vec(4.0f, 1.0f, 0.0f, 5.0f));

    ASSERT_EQ(tmp.wx(), vec(5.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wy(), vec(5.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wz(), vec(5.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.ww(), vec(5.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w0(), vec(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w1(), vec(5.0f, 1.0f, 0.0f, 5.0f));

    ASSERT_EQ(tmp._0x(), vec(0.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0y(), vec(0.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0z(), vec(0.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0w(), vec(0.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._00(), vec(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._01(), vec(0.0f, 1.0f, 0.0f, 5.0f));

    ASSERT_EQ(tmp._1x(), vec(1.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1y(), vec(1.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1z(), vec(1.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1w(), vec(1.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._10(), vec(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._11(), vec(1.0f, 1.0f, 0.0f, 5.0f));

    // Also with colour we want the alpha channel to be copied.
    ASSERT_EQ(tmp.rg(), vec(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.ba(), vec(4.0f, 5.0f, 0.0f, 5.0f));
}

TEST(Vec, Swizzle3) {
    let tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a homgenious 2D vector, z==0.0, w==w.
    ASSERT_EQ(tmp.xxx(), vec(2.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xxy(), vec(2.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xxz(), vec(2.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xxw(), vec(2.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xx0(), vec(2.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xx1(), vec(2.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xyx(), vec(2.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xyy(), vec(2.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xyz(), vec(2.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xyw(), vec(2.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xy0(), vec(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xy1(), vec(2.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xzx(), vec(2.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xzy(), vec(2.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xzz(), vec(2.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xzw(), vec(2.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xz0(), vec(2.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xz1(), vec(2.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xwx(), vec(2.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xwy(), vec(2.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xwz(), vec(2.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xww(), vec(2.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xw0(), vec(2.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xw1(), vec(2.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x0x(), vec(2.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x0y(), vec(2.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x0z(), vec(2.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x0w(), vec(2.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x00(), vec(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x01(), vec(2.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x1x(), vec(2.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x1y(), vec(2.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x1z(), vec(2.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x1w(), vec(2.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x10(), vec(2.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x11(), vec(2.0f, 1.0f, 1.0f, 5.0f));

    ASSERT_EQ(tmp.yxx(), vec(3.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yxy(), vec(3.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yxz(), vec(3.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yxw(), vec(3.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yx0(), vec(3.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yx1(), vec(3.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yyx(), vec(3.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yyy(), vec(3.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yyz(), vec(3.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yyw(), vec(3.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yy0(), vec(3.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yy1(), vec(3.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yzx(), vec(3.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yzy(), vec(3.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yzz(), vec(3.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yzw(), vec(3.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yz0(), vec(3.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yz1(), vec(3.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.ywx(), vec(3.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.ywy(), vec(3.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.ywz(), vec(3.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yww(), vec(3.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yw0(), vec(3.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yw1(), vec(3.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y0x(), vec(3.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y0y(), vec(3.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y0z(), vec(3.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y0w(), vec(3.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y00(), vec(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y01(), vec(3.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y1x(), vec(3.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y1y(), vec(3.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y1z(), vec(3.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y1w(), vec(3.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y10(), vec(3.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y11(), vec(3.0f, 1.0f, 1.0f, 5.0f));

    ASSERT_EQ(tmp.zxx(), vec(4.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zxy(), vec(4.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zxz(), vec(4.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zxw(), vec(4.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zx0(), vec(4.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zx1(), vec(4.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zyx(), vec(4.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zyy(), vec(4.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zyz(), vec(4.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zyw(), vec(4.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zy0(), vec(4.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zy1(), vec(4.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zzx(), vec(4.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zzy(), vec(4.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zzz(), vec(4.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zzw(), vec(4.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zz0(), vec(4.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zz1(), vec(4.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zwx(), vec(4.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zwy(), vec(4.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zwz(), vec(4.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zww(), vec(4.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zw0(), vec(4.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zw1(), vec(4.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z0x(), vec(4.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z0y(), vec(4.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z0z(), vec(4.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z0w(), vec(4.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z00(), vec(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z01(), vec(4.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z1x(), vec(4.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z1y(), vec(4.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z1z(), vec(4.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z1w(), vec(4.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z10(), vec(4.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z11(), vec(4.0f, 1.0f, 1.0f, 5.0f));

    ASSERT_EQ(tmp.wxx(), vec(5.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wxy(), vec(5.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wxz(), vec(5.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wxw(), vec(5.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wx0(), vec(5.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wx1(), vec(5.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wyx(), vec(5.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wyy(), vec(5.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wyz(), vec(5.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wyw(), vec(5.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wy0(), vec(5.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wy1(), vec(5.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wzx(), vec(5.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wzy(), vec(5.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wzz(), vec(5.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wzw(), vec(5.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wz0(), vec(5.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wz1(), vec(5.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wwx(), vec(5.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wwy(), vec(5.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wwz(), vec(5.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.www(), vec(5.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.ww0(), vec(5.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.ww1(), vec(5.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w0x(), vec(5.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w0y(), vec(5.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w0z(), vec(5.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w0w(), vec(5.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w00(), vec(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w01(), vec(5.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w1x(), vec(5.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w1y(), vec(5.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w1z(), vec(5.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w1w(), vec(5.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w10(), vec(5.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w11(), vec(5.0f, 1.0f, 1.0f, 5.0f));

    ASSERT_EQ(tmp._0xx(), vec(0.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0xy(), vec(0.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0xz(), vec(0.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0xw(), vec(0.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0x0(), vec(0.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0x1(), vec(0.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0yx(), vec(0.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0yy(), vec(0.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0yz(), vec(0.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0yw(), vec(0.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0y0(), vec(0.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0y1(), vec(0.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0zx(), vec(0.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0zy(), vec(0.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0zz(), vec(0.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0zw(), vec(0.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0z0(), vec(0.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0z1(), vec(0.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0wx(), vec(0.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0wy(), vec(0.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0wz(), vec(0.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0ww(), vec(0.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0w0(), vec(0.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0w1(), vec(0.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._00x(), vec(0.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._00y(), vec(0.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._00z(), vec(0.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._00w(), vec(0.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._000(), vec(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._001(), vec(0.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._01x(), vec(0.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._01y(), vec(0.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._01z(), vec(0.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._01w(), vec(0.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._010(), vec(0.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._011(), vec(0.0f, 1.0f, 1.0f, 5.0f));

    ASSERT_EQ(tmp._1xx(), vec(1.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1xy(), vec(1.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1xz(), vec(1.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1xw(), vec(1.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1x0(), vec(1.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1x1(), vec(1.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1yx(), vec(1.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1yy(), vec(1.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1yz(), vec(1.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1yw(), vec(1.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1y0(), vec(1.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1y1(), vec(1.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1zx(), vec(1.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1zy(), vec(1.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1zz(), vec(1.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1zw(), vec(1.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1z0(), vec(1.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1z1(), vec(1.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1wx(), vec(1.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1wy(), vec(1.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1wz(), vec(1.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1ww(), vec(1.0f, 5.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1w0(), vec(1.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1w1(), vec(1.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._10x(), vec(1.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._10y(), vec(1.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._10z(), vec(1.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._10w(), vec(1.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._100(), vec(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._101(), vec(1.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._11x(), vec(1.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._11y(), vec(1.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._11z(), vec(1.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._11w(), vec(1.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._110(), vec(1.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._111(), vec(1.0f, 1.0f, 1.0f, 5.0f));

    // Also with colour we want the alpha channel to be copied.
    ASSERT_EQ(tmp.rgb(), vec(2.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.gba(), vec(3.0f, 4.0f, 5.0f, 5.0f));
}

TEST(Vec, Swizzle4) {
    let tmp = vec{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a 4D vector.
    ASSERT_EQ(tmp._0000(), vec(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0001(), vec(0.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._000x(), vec(0.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._000y(), vec(0.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._000z(), vec(0.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._000w(), vec(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0010(), vec(0.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0011(), vec(0.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._001x(), vec(0.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._001y(), vec(0.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._001z(), vec(0.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._001w(), vec(0.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._00x0(), vec(0.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._00x1(), vec(0.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._00xx(), vec(0.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._00xy(), vec(0.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._00xz(), vec(0.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._00xw(), vec(0.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._00y0(), vec(0.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._00y1(), vec(0.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._00yx(), vec(0.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._00yy(), vec(0.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._00yz(), vec(0.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._00yw(), vec(0.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._00z0(), vec(0.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._00z1(), vec(0.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._00zx(), vec(0.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._00zy(), vec(0.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._00zz(), vec(0.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._00zw(), vec(0.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._00w0(), vec(0.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._00w1(), vec(0.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._00wx(), vec(0.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._00wy(), vec(0.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._00wz(), vec(0.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._00ww(), vec(0.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0000(), vec(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0001(), vec(0.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._000x(), vec(0.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._000y(), vec(0.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._000z(), vec(0.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._000w(), vec(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0010(), vec(0.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0011(), vec(0.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._001x(), vec(0.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._001y(), vec(0.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._001z(), vec(0.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._001w(), vec(0.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._00x0(), vec(0.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._00x1(), vec(0.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._00xx(), vec(0.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._00xy(), vec(0.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._00xz(), vec(0.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._00xw(), vec(0.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._00y0(), vec(0.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._00y1(), vec(0.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._00yx(), vec(0.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._00yy(), vec(0.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._00yz(), vec(0.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._00yw(), vec(0.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._00z0(), vec(0.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._00z1(), vec(0.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._00zx(), vec(0.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._00zy(), vec(0.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._00zz(), vec(0.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._00zw(), vec(0.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._00w0(), vec(0.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._00w1(), vec(0.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._00wx(), vec(0.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._00wy(), vec(0.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._00wz(), vec(0.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._00ww(), vec(0.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0100(), vec(0.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0101(), vec(0.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._010x(), vec(0.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._010y(), vec(0.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._010z(), vec(0.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._010w(), vec(0.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0110(), vec(0.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0111(), vec(0.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._011x(), vec(0.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._011y(), vec(0.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._011z(), vec(0.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._011w(), vec(0.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._01x0(), vec(0.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._01x1(), vec(0.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._01xx(), vec(0.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._01xy(), vec(0.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._01xz(), vec(0.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._01xw(), vec(0.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._01y0(), vec(0.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._01y1(), vec(0.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._01yx(), vec(0.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._01yy(), vec(0.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._01yz(), vec(0.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._01yw(), vec(0.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._01z0(), vec(0.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._01z1(), vec(0.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._01zx(), vec(0.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._01zy(), vec(0.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._01zz(), vec(0.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._01zw(), vec(0.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._01w0(), vec(0.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._01w1(), vec(0.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._01wx(), vec(0.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._01wy(), vec(0.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._01wz(), vec(0.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._01ww(), vec(0.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0x00(), vec(0.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0x01(), vec(0.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0x0x(), vec(0.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0x0y(), vec(0.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0x0z(), vec(0.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0x0w(), vec(0.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0x10(), vec(0.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0x11(), vec(0.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0x1x(), vec(0.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0x1y(), vec(0.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0x1z(), vec(0.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0x1w(), vec(0.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0xx0(), vec(0.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0xx1(), vec(0.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0xxx(), vec(0.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0xxy(), vec(0.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0xxz(), vec(0.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0xxw(), vec(0.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0xy0(), vec(0.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0xy1(), vec(0.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0xyx(), vec(0.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0xyy(), vec(0.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0xyz(), vec(0.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0xyw(), vec(0.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0xz0(), vec(0.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0xz1(), vec(0.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0xzx(), vec(0.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0xzy(), vec(0.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0xzz(), vec(0.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0xzw(), vec(0.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0xw0(), vec(0.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0xw1(), vec(0.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0xwx(), vec(0.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0xwy(), vec(0.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0xwz(), vec(0.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0xww(), vec(0.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0y00(), vec(0.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0y01(), vec(0.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0y0x(), vec(0.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0y0y(), vec(0.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0y0z(), vec(0.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0y0w(), vec(0.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0y10(), vec(0.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0y11(), vec(0.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0y1x(), vec(0.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0y1y(), vec(0.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0y1z(), vec(0.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0y1w(), vec(0.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0yx0(), vec(0.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0yx1(), vec(0.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0yxx(), vec(0.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0yxy(), vec(0.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0yxz(), vec(0.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0yxw(), vec(0.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0yy0(), vec(0.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0yy1(), vec(0.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0yyx(), vec(0.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0yyy(), vec(0.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0yyz(), vec(0.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0yyw(), vec(0.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0yz0(), vec(0.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0yz1(), vec(0.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0yzx(), vec(0.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0yzy(), vec(0.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0yzz(), vec(0.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0yzw(), vec(0.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0yw0(), vec(0.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0yw1(), vec(0.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0ywx(), vec(0.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0ywy(), vec(0.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0ywz(), vec(0.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0yww(), vec(0.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0z00(), vec(0.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0z01(), vec(0.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0z0x(), vec(0.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0z0y(), vec(0.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0z0z(), vec(0.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0z0w(), vec(0.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0z10(), vec(0.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0z11(), vec(0.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0z1x(), vec(0.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0z1y(), vec(0.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0z1z(), vec(0.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0z1w(), vec(0.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0zx0(), vec(0.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0zx1(), vec(0.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0zxx(), vec(0.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0zxy(), vec(0.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0zxz(), vec(0.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0zxw(), vec(0.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0zy0(), vec(0.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0zy1(), vec(0.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0zyx(), vec(0.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0zyy(), vec(0.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0zyz(), vec(0.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0zyw(), vec(0.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0zz0(), vec(0.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0zz1(), vec(0.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0zzx(), vec(0.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0zzy(), vec(0.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0zzz(), vec(0.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0zzw(), vec(0.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0zw0(), vec(0.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0zw1(), vec(0.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0zwx(), vec(0.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0zwy(), vec(0.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0zwz(), vec(0.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0zww(), vec(0.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0w00(), vec(0.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0w01(), vec(0.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0w0x(), vec(0.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0w0y(), vec(0.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0w0z(), vec(0.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0w0w(), vec(0.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0w10(), vec(0.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0w11(), vec(0.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0w1x(), vec(0.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0w1y(), vec(0.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0w1z(), vec(0.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0w1w(), vec(0.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0wx0(), vec(0.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0wx1(), vec(0.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0wxx(), vec(0.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0wxy(), vec(0.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0wxz(), vec(0.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0wxw(), vec(0.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0wy0(), vec(0.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0wy1(), vec(0.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0wyx(), vec(0.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0wyy(), vec(0.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0wyz(), vec(0.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0wyw(), vec(0.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0wz0(), vec(0.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0wz1(), vec(0.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0wzx(), vec(0.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0wzy(), vec(0.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0wzz(), vec(0.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0wzw(), vec(0.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0ww0(), vec(0.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0ww1(), vec(0.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0wwx(), vec(0.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0wwy(), vec(0.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0wwz(), vec(0.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0www(), vec(0.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp._1000(), vec(1.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1001(), vec(1.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._100x(), vec(1.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._100y(), vec(1.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._100z(), vec(1.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._100w(), vec(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1010(), vec(1.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1011(), vec(1.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._101x(), vec(1.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._101y(), vec(1.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._101z(), vec(1.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._101w(), vec(1.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._10x0(), vec(1.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._10x1(), vec(1.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._10xx(), vec(1.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._10xy(), vec(1.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._10xz(), vec(1.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._10xw(), vec(1.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._10y0(), vec(1.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._10y1(), vec(1.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._10yx(), vec(1.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._10yy(), vec(1.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._10yz(), vec(1.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._10yw(), vec(1.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._10z0(), vec(1.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._10z1(), vec(1.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._10zx(), vec(1.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._10zy(), vec(1.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._10zz(), vec(1.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._10zw(), vec(1.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._10w0(), vec(1.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._10w1(), vec(1.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._10wx(), vec(1.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._10wy(), vec(1.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._10wz(), vec(1.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._10ww(), vec(1.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1000(), vec(1.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1001(), vec(1.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._100x(), vec(1.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._100y(), vec(1.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._100z(), vec(1.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._100w(), vec(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1010(), vec(1.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1011(), vec(1.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._101x(), vec(1.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._101y(), vec(1.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._101z(), vec(1.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._101w(), vec(1.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._10x0(), vec(1.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._10x1(), vec(1.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._10xx(), vec(1.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._10xy(), vec(1.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._10xz(), vec(1.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._10xw(), vec(1.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._10y0(), vec(1.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._10y1(), vec(1.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._10yx(), vec(1.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._10yy(), vec(1.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._10yz(), vec(1.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._10yw(), vec(1.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._10z0(), vec(1.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._10z1(), vec(1.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._10zx(), vec(1.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._10zy(), vec(1.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._10zz(), vec(1.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._10zw(), vec(1.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._10w0(), vec(1.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._10w1(), vec(1.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._10wx(), vec(1.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._10wy(), vec(1.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._10wz(), vec(1.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._10ww(), vec(1.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1100(), vec(1.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1101(), vec(1.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._110x(), vec(1.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._110y(), vec(1.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._110z(), vec(1.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._110w(), vec(1.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1110(), vec(1.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1111(), vec(1.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._111x(), vec(1.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._111y(), vec(1.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._111z(), vec(1.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._111w(), vec(1.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._11x0(), vec(1.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._11x1(), vec(1.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._11xx(), vec(1.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._11xy(), vec(1.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._11xz(), vec(1.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._11xw(), vec(1.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._11y0(), vec(1.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._11y1(), vec(1.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._11yx(), vec(1.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._11yy(), vec(1.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._11yz(), vec(1.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._11yw(), vec(1.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._11z0(), vec(1.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._11z1(), vec(1.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._11zx(), vec(1.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._11zy(), vec(1.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._11zz(), vec(1.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._11zw(), vec(1.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._11w0(), vec(1.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._11w1(), vec(1.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._11wx(), vec(1.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._11wy(), vec(1.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._11wz(), vec(1.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._11ww(), vec(1.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1x00(), vec(1.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1x01(), vec(1.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1x0x(), vec(1.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1x0y(), vec(1.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1x0z(), vec(1.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1x0w(), vec(1.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1x10(), vec(1.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1x11(), vec(1.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1x1x(), vec(1.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1x1y(), vec(1.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1x1z(), vec(1.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1x1w(), vec(1.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1xx0(), vec(1.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1xx1(), vec(1.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1xxx(), vec(1.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1xxy(), vec(1.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1xxz(), vec(1.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1xxw(), vec(1.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1xy0(), vec(1.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1xy1(), vec(1.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1xyx(), vec(1.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1xyy(), vec(1.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1xyz(), vec(1.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1xyw(), vec(1.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1xz0(), vec(1.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1xz1(), vec(1.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1xzx(), vec(1.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1xzy(), vec(1.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1xzz(), vec(1.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1xzw(), vec(1.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1xw0(), vec(1.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1xw1(), vec(1.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1xwx(), vec(1.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1xwy(), vec(1.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1xwz(), vec(1.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1xww(), vec(1.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1y00(), vec(1.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1y01(), vec(1.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1y0x(), vec(1.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1y0y(), vec(1.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1y0z(), vec(1.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1y0w(), vec(1.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1y10(), vec(1.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1y11(), vec(1.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1y1x(), vec(1.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1y1y(), vec(1.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1y1z(), vec(1.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1y1w(), vec(1.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1yx0(), vec(1.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1yx1(), vec(1.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1yxx(), vec(1.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1yxy(), vec(1.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1yxz(), vec(1.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1yxw(), vec(1.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1yy0(), vec(1.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1yy1(), vec(1.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1yyx(), vec(1.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1yyy(), vec(1.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1yyz(), vec(1.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1yyw(), vec(1.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1yz0(), vec(1.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1yz1(), vec(1.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1yzx(), vec(1.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1yzy(), vec(1.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1yzz(), vec(1.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1yzw(), vec(1.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1yw0(), vec(1.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1yw1(), vec(1.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1ywx(), vec(1.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1ywy(), vec(1.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1ywz(), vec(1.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1yww(), vec(1.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1z00(), vec(1.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1z01(), vec(1.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1z0x(), vec(1.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1z0y(), vec(1.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1z0z(), vec(1.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1z0w(), vec(1.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1z10(), vec(1.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1z11(), vec(1.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1z1x(), vec(1.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1z1y(), vec(1.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1z1z(), vec(1.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1z1w(), vec(1.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1zx0(), vec(1.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1zx1(), vec(1.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1zxx(), vec(1.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1zxy(), vec(1.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1zxz(), vec(1.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1zxw(), vec(1.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1zy0(), vec(1.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1zy1(), vec(1.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1zyx(), vec(1.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1zyy(), vec(1.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1zyz(), vec(1.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1zyw(), vec(1.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1zz0(), vec(1.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1zz1(), vec(1.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1zzx(), vec(1.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1zzy(), vec(1.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1zzz(), vec(1.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1zzw(), vec(1.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1zw0(), vec(1.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1zw1(), vec(1.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1zwx(), vec(1.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1zwy(), vec(1.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1zwz(), vec(1.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1zww(), vec(1.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1w00(), vec(1.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1w01(), vec(1.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1w0x(), vec(1.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1w0y(), vec(1.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1w0z(), vec(1.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1w0w(), vec(1.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1w10(), vec(1.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1w11(), vec(1.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1w1x(), vec(1.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1w1y(), vec(1.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1w1z(), vec(1.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1w1w(), vec(1.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1wx0(), vec(1.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1wx1(), vec(1.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1wxx(), vec(1.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1wxy(), vec(1.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1wxz(), vec(1.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1wxw(), vec(1.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1wy0(), vec(1.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1wy1(), vec(1.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1wyx(), vec(1.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1wyy(), vec(1.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1wyz(), vec(1.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1wyw(), vec(1.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1wz0(), vec(1.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1wz1(), vec(1.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1wzx(), vec(1.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1wzy(), vec(1.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1wzz(), vec(1.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1wzw(), vec(1.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1ww0(), vec(1.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1ww1(), vec(1.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1wwx(), vec(1.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1wwy(), vec(1.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1wwz(), vec(1.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1www(), vec(1.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.x000(), vec(2.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x001(), vec(2.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x00x(), vec(2.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x00y(), vec(2.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x00z(), vec(2.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x00w(), vec(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x010(), vec(2.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x011(), vec(2.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x01x(), vec(2.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x01y(), vec(2.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x01z(), vec(2.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x01w(), vec(2.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x0x0(), vec(2.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x0x1(), vec(2.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x0xx(), vec(2.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x0xy(), vec(2.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x0xz(), vec(2.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x0xw(), vec(2.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x0y0(), vec(2.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x0y1(), vec(2.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x0yx(), vec(2.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x0yy(), vec(2.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x0yz(), vec(2.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x0yw(), vec(2.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x0z0(), vec(2.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x0z1(), vec(2.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x0zx(), vec(2.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x0zy(), vec(2.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x0zz(), vec(2.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x0zw(), vec(2.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x0w0(), vec(2.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x0w1(), vec(2.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x0wx(), vec(2.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x0wy(), vec(2.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x0wz(), vec(2.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x0ww(), vec(2.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x000(), vec(2.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x001(), vec(2.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x00x(), vec(2.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x00y(), vec(2.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x00z(), vec(2.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x00w(), vec(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x010(), vec(2.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x011(), vec(2.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x01x(), vec(2.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x01y(), vec(2.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x01z(), vec(2.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x01w(), vec(2.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x0x0(), vec(2.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x0x1(), vec(2.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x0xx(), vec(2.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x0xy(), vec(2.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x0xz(), vec(2.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x0xw(), vec(2.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x0y0(), vec(2.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x0y1(), vec(2.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x0yx(), vec(2.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x0yy(), vec(2.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x0yz(), vec(2.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x0yw(), vec(2.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x0z0(), vec(2.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x0z1(), vec(2.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x0zx(), vec(2.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x0zy(), vec(2.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x0zz(), vec(2.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x0zw(), vec(2.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x0w0(), vec(2.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x0w1(), vec(2.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x0wx(), vec(2.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x0wy(), vec(2.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x0wz(), vec(2.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x0ww(), vec(2.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x100(), vec(2.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x101(), vec(2.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x10x(), vec(2.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x10y(), vec(2.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x10z(), vec(2.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x10w(), vec(2.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x110(), vec(2.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x111(), vec(2.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x11x(), vec(2.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x11y(), vec(2.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x11z(), vec(2.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x11w(), vec(2.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x1x0(), vec(2.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x1x1(), vec(2.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x1xx(), vec(2.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x1xy(), vec(2.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x1xz(), vec(2.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x1xw(), vec(2.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x1y0(), vec(2.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x1y1(), vec(2.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x1yx(), vec(2.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x1yy(), vec(2.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x1yz(), vec(2.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x1yw(), vec(2.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x1z0(), vec(2.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x1z1(), vec(2.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x1zx(), vec(2.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x1zy(), vec(2.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x1zz(), vec(2.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x1zw(), vec(2.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x1w0(), vec(2.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x1w1(), vec(2.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x1wx(), vec(2.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x1wy(), vec(2.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x1wz(), vec(2.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x1ww(), vec(2.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xx00(), vec(2.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xx01(), vec(2.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xx0x(), vec(2.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xx0y(), vec(2.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xx0z(), vec(2.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xx0w(), vec(2.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xx10(), vec(2.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xx11(), vec(2.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xx1x(), vec(2.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xx1y(), vec(2.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xx1z(), vec(2.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xx1w(), vec(2.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xxx0(), vec(2.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xxx1(), vec(2.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xxxx(), vec(2.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xxxy(), vec(2.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xxxz(), vec(2.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xxxw(), vec(2.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xxy0(), vec(2.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xxy1(), vec(2.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xxyx(), vec(2.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xxyy(), vec(2.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xxyz(), vec(2.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xxyw(), vec(2.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xxz0(), vec(2.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xxz1(), vec(2.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xxzx(), vec(2.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xxzy(), vec(2.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xxzz(), vec(2.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xxzw(), vec(2.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xxw0(), vec(2.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xxw1(), vec(2.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xxwx(), vec(2.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xxwy(), vec(2.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xxwz(), vec(2.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xxww(), vec(2.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xy00(), vec(2.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xy01(), vec(2.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xy0x(), vec(2.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xy0y(), vec(2.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xy0z(), vec(2.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xy0w(), vec(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xy10(), vec(2.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xy11(), vec(2.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xy1x(), vec(2.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xy1y(), vec(2.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xy1z(), vec(2.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xy1w(), vec(2.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xyx0(), vec(2.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xyx1(), vec(2.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xyxx(), vec(2.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xyxy(), vec(2.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xyxz(), vec(2.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xyxw(), vec(2.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xyy0(), vec(2.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xyy1(), vec(2.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xyyx(), vec(2.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xyyy(), vec(2.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xyyz(), vec(2.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xyyw(), vec(2.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xyz0(), vec(2.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xyz1(), vec(2.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xyzx(), vec(2.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xyzy(), vec(2.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xyzz(), vec(2.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xyzw(), vec(2.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xyw0(), vec(2.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xyw1(), vec(2.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xywx(), vec(2.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xywy(), vec(2.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xywz(), vec(2.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xyww(), vec(2.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xz00(), vec(2.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xz01(), vec(2.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xz0x(), vec(2.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xz0y(), vec(2.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xz0z(), vec(2.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xz0w(), vec(2.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xz10(), vec(2.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xz11(), vec(2.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xz1x(), vec(2.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xz1y(), vec(2.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xz1z(), vec(2.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xz1w(), vec(2.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xzx0(), vec(2.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xzx1(), vec(2.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xzxx(), vec(2.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xzxy(), vec(2.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xzxz(), vec(2.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xzxw(), vec(2.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xzy0(), vec(2.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xzy1(), vec(2.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xzyx(), vec(2.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xzyy(), vec(2.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xzyz(), vec(2.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xzyw(), vec(2.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xzz0(), vec(2.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xzz1(), vec(2.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xzzx(), vec(2.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xzzy(), vec(2.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xzzz(), vec(2.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xzzw(), vec(2.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xzw0(), vec(2.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xzw1(), vec(2.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xzwx(), vec(2.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xzwy(), vec(2.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xzwz(), vec(2.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xzww(), vec(2.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xw00(), vec(2.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xw01(), vec(2.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xw0x(), vec(2.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xw0y(), vec(2.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xw0z(), vec(2.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xw0w(), vec(2.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xw10(), vec(2.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xw11(), vec(2.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xw1x(), vec(2.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xw1y(), vec(2.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xw1z(), vec(2.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xw1w(), vec(2.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xwx0(), vec(2.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xwx1(), vec(2.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xwxx(), vec(2.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xwxy(), vec(2.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xwxz(), vec(2.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xwxw(), vec(2.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xwy0(), vec(2.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xwy1(), vec(2.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xwyx(), vec(2.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xwyy(), vec(2.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xwyz(), vec(2.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xwyw(), vec(2.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xwz0(), vec(2.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xwz1(), vec(2.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xwzx(), vec(2.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xwzy(), vec(2.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xwzz(), vec(2.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xwzw(), vec(2.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xww0(), vec(2.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xww1(), vec(2.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xwwx(), vec(2.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xwwy(), vec(2.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xwwz(), vec(2.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xwww(), vec(2.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.y000(), vec(3.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y001(), vec(3.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y00x(), vec(3.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y00y(), vec(3.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y00z(), vec(3.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y00w(), vec(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y010(), vec(3.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y011(), vec(3.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y01x(), vec(3.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y01y(), vec(3.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y01z(), vec(3.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y01w(), vec(3.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y0x0(), vec(3.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y0x1(), vec(3.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y0xx(), vec(3.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y0xy(), vec(3.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y0xz(), vec(3.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y0xw(), vec(3.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y0y0(), vec(3.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y0y1(), vec(3.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y0yx(), vec(3.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y0yy(), vec(3.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y0yz(), vec(3.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y0yw(), vec(3.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y0z0(), vec(3.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y0z1(), vec(3.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y0zx(), vec(3.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y0zy(), vec(3.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y0zz(), vec(3.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y0zw(), vec(3.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y0w0(), vec(3.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y0w1(), vec(3.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y0wx(), vec(3.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y0wy(), vec(3.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y0wz(), vec(3.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y0ww(), vec(3.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y000(), vec(3.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y001(), vec(3.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y00x(), vec(3.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y00y(), vec(3.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y00z(), vec(3.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y00w(), vec(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y010(), vec(3.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y011(), vec(3.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y01x(), vec(3.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y01y(), vec(3.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y01z(), vec(3.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y01w(), vec(3.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y0x0(), vec(3.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y0x1(), vec(3.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y0xx(), vec(3.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y0xy(), vec(3.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y0xz(), vec(3.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y0xw(), vec(3.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y0y0(), vec(3.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y0y1(), vec(3.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y0yx(), vec(3.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y0yy(), vec(3.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y0yz(), vec(3.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y0yw(), vec(3.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y0z0(), vec(3.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y0z1(), vec(3.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y0zx(), vec(3.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y0zy(), vec(3.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y0zz(), vec(3.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y0zw(), vec(3.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y0w0(), vec(3.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y0w1(), vec(3.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y0wx(), vec(3.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y0wy(), vec(3.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y0wz(), vec(3.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y0ww(), vec(3.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y100(), vec(3.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y101(), vec(3.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y10x(), vec(3.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y10y(), vec(3.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y10z(), vec(3.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y10w(), vec(3.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y110(), vec(3.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y111(), vec(3.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y11x(), vec(3.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y11y(), vec(3.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y11z(), vec(3.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y11w(), vec(3.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y1x0(), vec(3.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y1x1(), vec(3.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y1xx(), vec(3.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y1xy(), vec(3.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y1xz(), vec(3.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y1xw(), vec(3.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y1y0(), vec(3.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y1y1(), vec(3.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y1yx(), vec(3.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y1yy(), vec(3.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y1yz(), vec(3.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y1yw(), vec(3.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y1z0(), vec(3.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y1z1(), vec(3.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y1zx(), vec(3.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y1zy(), vec(3.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y1zz(), vec(3.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y1zw(), vec(3.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y1w0(), vec(3.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y1w1(), vec(3.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y1wx(), vec(3.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y1wy(), vec(3.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y1wz(), vec(3.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y1ww(), vec(3.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yx00(), vec(3.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yx01(), vec(3.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yx0x(), vec(3.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yx0y(), vec(3.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yx0z(), vec(3.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yx0w(), vec(3.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yx10(), vec(3.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yx11(), vec(3.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yx1x(), vec(3.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yx1y(), vec(3.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yx1z(), vec(3.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yx1w(), vec(3.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yxx0(), vec(3.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yxx1(), vec(3.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yxxx(), vec(3.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yxxy(), vec(3.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yxxz(), vec(3.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yxxw(), vec(3.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yxy0(), vec(3.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yxy1(), vec(3.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yxyx(), vec(3.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yxyy(), vec(3.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yxyz(), vec(3.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yxyw(), vec(3.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yxz0(), vec(3.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yxz1(), vec(3.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yxzx(), vec(3.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yxzy(), vec(3.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yxzz(), vec(3.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yxzw(), vec(3.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yxw0(), vec(3.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yxw1(), vec(3.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yxwx(), vec(3.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yxwy(), vec(3.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yxwz(), vec(3.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yxww(), vec(3.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yy00(), vec(3.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yy01(), vec(3.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yy0x(), vec(3.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yy0y(), vec(3.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yy0z(), vec(3.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yy0w(), vec(3.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yy10(), vec(3.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yy11(), vec(3.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yy1x(), vec(3.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yy1y(), vec(3.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yy1z(), vec(3.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yy1w(), vec(3.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yyx0(), vec(3.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yyx1(), vec(3.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yyxx(), vec(3.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yyxy(), vec(3.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yyxz(), vec(3.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yyxw(), vec(3.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yyy0(), vec(3.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yyy1(), vec(3.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yyyx(), vec(3.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yyyy(), vec(3.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yyyz(), vec(3.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yyyw(), vec(3.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yyz0(), vec(3.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yyz1(), vec(3.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yyzx(), vec(3.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yyzy(), vec(3.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yyzz(), vec(3.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yyzw(), vec(3.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yyw0(), vec(3.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yyw1(), vec(3.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yywx(), vec(3.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yywy(), vec(3.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yywz(), vec(3.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yyww(), vec(3.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yz00(), vec(3.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yz01(), vec(3.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yz0x(), vec(3.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yz0y(), vec(3.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yz0z(), vec(3.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yz0w(), vec(3.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yz10(), vec(3.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yz11(), vec(3.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yz1x(), vec(3.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yz1y(), vec(3.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yz1z(), vec(3.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yz1w(), vec(3.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yzx0(), vec(3.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yzx1(), vec(3.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yzxx(), vec(3.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yzxy(), vec(3.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yzxz(), vec(3.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yzxw(), vec(3.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yzy0(), vec(3.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yzy1(), vec(3.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yzyx(), vec(3.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yzyy(), vec(3.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yzyz(), vec(3.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yzyw(), vec(3.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yzz0(), vec(3.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yzz1(), vec(3.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yzzx(), vec(3.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yzzy(), vec(3.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yzzz(), vec(3.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yzzw(), vec(3.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yzw0(), vec(3.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yzw1(), vec(3.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yzwx(), vec(3.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yzwy(), vec(3.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yzwz(), vec(3.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yzww(), vec(3.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yw00(), vec(3.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yw01(), vec(3.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yw0x(), vec(3.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yw0y(), vec(3.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yw0z(), vec(3.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yw0w(), vec(3.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yw10(), vec(3.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yw11(), vec(3.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yw1x(), vec(3.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yw1y(), vec(3.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yw1z(), vec(3.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yw1w(), vec(3.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.ywx0(), vec(3.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.ywx1(), vec(3.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.ywxx(), vec(3.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.ywxy(), vec(3.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.ywxz(), vec(3.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.ywxw(), vec(3.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.ywy0(), vec(3.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.ywy1(), vec(3.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.ywyx(), vec(3.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.ywyy(), vec(3.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.ywyz(), vec(3.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.ywyw(), vec(3.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.ywz0(), vec(3.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.ywz1(), vec(3.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.ywzx(), vec(3.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.ywzy(), vec(3.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.ywzz(), vec(3.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.ywzw(), vec(3.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yww0(), vec(3.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yww1(), vec(3.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.ywwx(), vec(3.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.ywwy(), vec(3.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.ywwz(), vec(3.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.ywww(), vec(3.0f, 5.0f, 5.0f, 5.0f));
                              
    ASSERT_EQ(tmp.z000(), vec(4.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z001(), vec(4.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z00x(), vec(4.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z00y(), vec(4.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z00z(), vec(4.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z00w(), vec(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z010(), vec(4.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z011(), vec(4.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z01x(), vec(4.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z01y(), vec(4.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z01z(), vec(4.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z01w(), vec(4.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z0x0(), vec(4.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z0x1(), vec(4.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z0xx(), vec(4.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z0xy(), vec(4.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z0xz(), vec(4.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z0xw(), vec(4.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z0y0(), vec(4.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z0y1(), vec(4.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z0yx(), vec(4.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z0yy(), vec(4.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z0yz(), vec(4.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z0yw(), vec(4.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z0z0(), vec(4.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z0z1(), vec(4.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z0zx(), vec(4.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z0zy(), vec(4.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z0zz(), vec(4.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z0zw(), vec(4.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z0w0(), vec(4.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z0w1(), vec(4.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z0wx(), vec(4.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z0wy(), vec(4.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z0wz(), vec(4.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z0ww(), vec(4.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z000(), vec(4.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z001(), vec(4.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z00x(), vec(4.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z00y(), vec(4.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z00z(), vec(4.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z00w(), vec(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z010(), vec(4.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z011(), vec(4.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z01x(), vec(4.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z01y(), vec(4.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z01z(), vec(4.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z01w(), vec(4.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z0x0(), vec(4.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z0x1(), vec(4.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z0xx(), vec(4.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z0xy(), vec(4.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z0xz(), vec(4.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z0xw(), vec(4.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z0y0(), vec(4.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z0y1(), vec(4.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z0yx(), vec(4.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z0yy(), vec(4.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z0yz(), vec(4.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z0yw(), vec(4.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z0z0(), vec(4.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z0z1(), vec(4.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z0zx(), vec(4.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z0zy(), vec(4.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z0zz(), vec(4.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z0zw(), vec(4.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z0w0(), vec(4.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z0w1(), vec(4.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z0wx(), vec(4.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z0wy(), vec(4.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z0wz(), vec(4.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z0ww(), vec(4.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z100(), vec(4.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z101(), vec(4.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z10x(), vec(4.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z10y(), vec(4.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z10z(), vec(4.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z10w(), vec(4.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z110(), vec(4.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z111(), vec(4.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z11x(), vec(4.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z11y(), vec(4.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z11z(), vec(4.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z11w(), vec(4.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z1x0(), vec(4.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z1x1(), vec(4.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z1xx(), vec(4.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z1xy(), vec(4.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z1xz(), vec(4.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z1xw(), vec(4.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z1y0(), vec(4.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z1y1(), vec(4.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z1yx(), vec(4.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z1yy(), vec(4.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z1yz(), vec(4.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z1yw(), vec(4.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z1z0(), vec(4.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z1z1(), vec(4.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z1zx(), vec(4.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z1zy(), vec(4.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z1zz(), vec(4.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z1zw(), vec(4.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z1w0(), vec(4.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z1w1(), vec(4.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z1wx(), vec(4.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z1wy(), vec(4.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z1wz(), vec(4.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z1ww(), vec(4.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zx00(), vec(4.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zx01(), vec(4.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zx0x(), vec(4.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zx0y(), vec(4.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zx0z(), vec(4.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zx0w(), vec(4.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zx10(), vec(4.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zx11(), vec(4.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zx1x(), vec(4.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zx1y(), vec(4.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zx1z(), vec(4.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zx1w(), vec(4.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zxx0(), vec(4.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zxx1(), vec(4.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zxxx(), vec(4.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zxxy(), vec(4.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zxxz(), vec(4.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zxxw(), vec(4.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zxy0(), vec(4.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zxy1(), vec(4.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zxyx(), vec(4.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zxyy(), vec(4.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zxyz(), vec(4.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zxyw(), vec(4.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zxz0(), vec(4.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zxz1(), vec(4.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zxzx(), vec(4.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zxzy(), vec(4.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zxzz(), vec(4.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zxzw(), vec(4.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zxw0(), vec(4.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zxw1(), vec(4.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zxwx(), vec(4.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zxwy(), vec(4.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zxwz(), vec(4.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zxww(), vec(4.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zy00(), vec(4.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zy01(), vec(4.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zy0x(), vec(4.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zy0y(), vec(4.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zy0z(), vec(4.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zy0w(), vec(4.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zy10(), vec(4.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zy11(), vec(4.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zy1x(), vec(4.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zy1y(), vec(4.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zy1z(), vec(4.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zy1w(), vec(4.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zyx0(), vec(4.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zyx1(), vec(4.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zyxx(), vec(4.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zyxy(), vec(4.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zyxz(), vec(4.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zyxw(), vec(4.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zyy0(), vec(4.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zyy1(), vec(4.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zyyx(), vec(4.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zyyy(), vec(4.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zyyz(), vec(4.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zyyw(), vec(4.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zyz0(), vec(4.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zyz1(), vec(4.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zyzx(), vec(4.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zyzy(), vec(4.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zyzz(), vec(4.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zyzw(), vec(4.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zyw0(), vec(4.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zyw1(), vec(4.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zywx(), vec(4.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zywy(), vec(4.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zywz(), vec(4.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zyww(), vec(4.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zz00(), vec(4.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zz01(), vec(4.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zz0x(), vec(4.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zz0y(), vec(4.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zz0z(), vec(4.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zz0w(), vec(4.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zz10(), vec(4.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zz11(), vec(4.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zz1x(), vec(4.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zz1y(), vec(4.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zz1z(), vec(4.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zz1w(), vec(4.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zzx0(), vec(4.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zzx1(), vec(4.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zzxx(), vec(4.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zzxy(), vec(4.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zzxz(), vec(4.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zzxw(), vec(4.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zzy0(), vec(4.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zzy1(), vec(4.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zzyx(), vec(4.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zzyy(), vec(4.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zzyz(), vec(4.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zzyw(), vec(4.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zzz0(), vec(4.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zzz1(), vec(4.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zzzx(), vec(4.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zzzy(), vec(4.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zzzz(), vec(4.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zzzw(), vec(4.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zzw0(), vec(4.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zzw1(), vec(4.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zzwx(), vec(4.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zzwy(), vec(4.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zzwz(), vec(4.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zzww(), vec(4.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zw00(), vec(4.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zw01(), vec(4.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zw0x(), vec(4.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zw0y(), vec(4.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zw0z(), vec(4.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zw0w(), vec(4.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zw10(), vec(4.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zw11(), vec(4.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zw1x(), vec(4.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zw1y(), vec(4.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zw1z(), vec(4.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zw1w(), vec(4.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zwx0(), vec(4.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zwx1(), vec(4.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zwxx(), vec(4.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zwxy(), vec(4.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zwxz(), vec(4.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zwxw(), vec(4.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zwy0(), vec(4.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zwy1(), vec(4.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zwyx(), vec(4.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zwyy(), vec(4.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zwyz(), vec(4.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zwyw(), vec(4.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zwz0(), vec(4.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zwz1(), vec(4.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zwzx(), vec(4.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zwzy(), vec(4.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zwzz(), vec(4.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zwzw(), vec(4.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zww0(), vec(4.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zww1(), vec(4.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zwwx(), vec(4.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zwwy(), vec(4.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zwwz(), vec(4.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zwww(), vec(4.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.w000(), vec(5.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w001(), vec(5.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w00x(), vec(5.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w00y(), vec(5.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w00z(), vec(5.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w00w(), vec(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w010(), vec(5.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w011(), vec(5.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w01x(), vec(5.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w01y(), vec(5.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w01z(), vec(5.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w01w(), vec(5.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w0x0(), vec(5.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w0x1(), vec(5.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w0xx(), vec(5.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w0xy(), vec(5.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w0xz(), vec(5.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w0xw(), vec(5.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w0y0(), vec(5.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w0y1(), vec(5.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w0yx(), vec(5.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w0yy(), vec(5.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w0yz(), vec(5.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w0yw(), vec(5.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w0z0(), vec(5.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w0z1(), vec(5.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w0zx(), vec(5.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w0zy(), vec(5.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w0zz(), vec(5.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w0zw(), vec(5.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w0w0(), vec(5.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w0w1(), vec(5.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w0wx(), vec(5.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w0wy(), vec(5.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w0wz(), vec(5.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w0ww(), vec(5.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w000(), vec(5.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w001(), vec(5.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w00x(), vec(5.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w00y(), vec(5.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w00z(), vec(5.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w00w(), vec(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w010(), vec(5.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w011(), vec(5.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w01x(), vec(5.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w01y(), vec(5.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w01z(), vec(5.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w01w(), vec(5.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w0x0(), vec(5.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w0x1(), vec(5.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w0xx(), vec(5.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w0xy(), vec(5.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w0xz(), vec(5.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w0xw(), vec(5.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w0y0(), vec(5.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w0y1(), vec(5.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w0yx(), vec(5.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w0yy(), vec(5.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w0yz(), vec(5.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w0yw(), vec(5.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w0z0(), vec(5.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w0z1(), vec(5.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w0zx(), vec(5.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w0zy(), vec(5.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w0zz(), vec(5.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w0zw(), vec(5.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w0w0(), vec(5.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w0w1(), vec(5.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w0wx(), vec(5.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w0wy(), vec(5.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w0wz(), vec(5.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w0ww(), vec(5.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w100(), vec(5.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w101(), vec(5.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w10x(), vec(5.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w10y(), vec(5.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w10z(), vec(5.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w10w(), vec(5.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w110(), vec(5.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w111(), vec(5.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w11x(), vec(5.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w11y(), vec(5.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w11z(), vec(5.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w11w(), vec(5.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w1x0(), vec(5.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w1x1(), vec(5.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w1xx(), vec(5.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w1xy(), vec(5.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w1xz(), vec(5.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w1xw(), vec(5.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w1y0(), vec(5.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w1y1(), vec(5.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w1yx(), vec(5.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w1yy(), vec(5.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w1yz(), vec(5.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w1yw(), vec(5.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w1z0(), vec(5.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w1z1(), vec(5.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w1zx(), vec(5.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w1zy(), vec(5.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w1zz(), vec(5.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w1zw(), vec(5.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w1w0(), vec(5.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w1w1(), vec(5.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w1wx(), vec(5.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w1wy(), vec(5.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w1wz(), vec(5.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w1ww(), vec(5.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wx00(), vec(5.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wx01(), vec(5.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wx0x(), vec(5.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wx0y(), vec(5.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wx0z(), vec(5.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wx0w(), vec(5.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wx10(), vec(5.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wx11(), vec(5.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wx1x(), vec(5.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wx1y(), vec(5.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wx1z(), vec(5.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wx1w(), vec(5.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wxx0(), vec(5.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wxx1(), vec(5.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wxxx(), vec(5.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wxxy(), vec(5.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wxxz(), vec(5.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wxxw(), vec(5.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wxy0(), vec(5.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wxy1(), vec(5.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wxyx(), vec(5.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wxyy(), vec(5.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wxyz(), vec(5.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wxyw(), vec(5.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wxz0(), vec(5.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wxz1(), vec(5.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wxzx(), vec(5.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wxzy(), vec(5.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wxzz(), vec(5.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wxzw(), vec(5.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wxw0(), vec(5.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wxw1(), vec(5.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wxwx(), vec(5.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wxwy(), vec(5.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wxwz(), vec(5.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wxww(), vec(5.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wy00(), vec(5.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wy01(), vec(5.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wy0x(), vec(5.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wy0y(), vec(5.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wy0z(), vec(5.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wy0w(), vec(5.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wy10(), vec(5.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wy11(), vec(5.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wy1x(), vec(5.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wy1y(), vec(5.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wy1z(), vec(5.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wy1w(), vec(5.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wyx0(), vec(5.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wyx1(), vec(5.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wyxx(), vec(5.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wyxy(), vec(5.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wyxz(), vec(5.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wyxw(), vec(5.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wyy0(), vec(5.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wyy1(), vec(5.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wyyx(), vec(5.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wyyy(), vec(5.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wyyz(), vec(5.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wyyw(), vec(5.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wyz0(), vec(5.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wyz1(), vec(5.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wyzx(), vec(5.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wyzy(), vec(5.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wyzz(), vec(5.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wyzw(), vec(5.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wyw0(), vec(5.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wyw1(), vec(5.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wywx(), vec(5.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wywy(), vec(5.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wywz(), vec(5.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wyww(), vec(5.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wz00(), vec(5.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wz01(), vec(5.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wz0x(), vec(5.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wz0y(), vec(5.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wz0z(), vec(5.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wz0w(), vec(5.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wz10(), vec(5.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wz11(), vec(5.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wz1x(), vec(5.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wz1y(), vec(5.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wz1z(), vec(5.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wz1w(), vec(5.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wzx0(), vec(5.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wzx1(), vec(5.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wzxx(), vec(5.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wzxy(), vec(5.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wzxz(), vec(5.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wzxw(), vec(5.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wzy0(), vec(5.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wzy1(), vec(5.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wzyx(), vec(5.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wzyy(), vec(5.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wzyz(), vec(5.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wzyw(), vec(5.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wzz0(), vec(5.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wzz1(), vec(5.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wzzx(), vec(5.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wzzy(), vec(5.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wzzz(), vec(5.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wzzw(), vec(5.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wzw0(), vec(5.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wzw1(), vec(5.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wzwx(), vec(5.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wzwy(), vec(5.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wzwz(), vec(5.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wzww(), vec(5.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.ww00(), vec(5.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.ww01(), vec(5.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.ww0x(), vec(5.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.ww0y(), vec(5.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.ww0z(), vec(5.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.ww0w(), vec(5.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.ww10(), vec(5.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.ww11(), vec(5.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.ww1x(), vec(5.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.ww1y(), vec(5.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.ww1z(), vec(5.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.ww1w(), vec(5.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wwx0(), vec(5.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wwx1(), vec(5.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wwxx(), vec(5.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wwxy(), vec(5.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wwxz(), vec(5.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wwxw(), vec(5.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wwy0(), vec(5.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wwy1(), vec(5.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wwyx(), vec(5.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wwyy(), vec(5.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wwyz(), vec(5.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wwyw(), vec(5.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wwz0(), vec(5.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wwz1(), vec(5.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wwzx(), vec(5.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wwzy(), vec(5.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wwzz(), vec(5.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wwzw(), vec(5.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.www0(), vec(5.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.www1(), vec(5.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wwwx(), vec(5.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wwwy(), vec(5.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wwwz(), vec(5.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wwww(), vec(5.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.abgr(), vec(5.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.grab(), vec(3.0f, 2.0f, 5.0f, 4.0f));
}