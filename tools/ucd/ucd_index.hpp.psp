// This file was generated by generate_unicode_data.py

#pragma once

#include "../utility/module.hpp"
#include <cstdint>

namespace hi {
inline namespace v1 {
namespace detail {

/** A index for finding unicode descriptions for a specific code-point.
 *
 * We use a C-style array here, since tools and compilers crash on std::array with arround a 100 initializers.
 */
constexpr uint16_t ucd_index[$len(indices)$] = {\
$for i, index in enumerate(indices):
    $if i % 16 == 0:

    $index$,\
    $else:
 $index$,\
    $end
$end
};

} // namespace detail

/** Get the index into the unicode database sub-tables.
 *
 *
 * @param c The code-point to get a sub-table index for.
 * @return A index into the unicode database sub-tables.
 */
[[nodiscard]] constexpr size_t ucd_get_index(char32_t c) noexcept
{
    hi_axiom(c <= 0x1f'ffff);

    hilet c_ = char_cast<size_t>(c);
    auto index = c_ >> 5;
    index = detail::ucd_index[index];
    index <<= 5;
    index |= c_ & 0x1f;
    return index;
}

}} // namespace hi::v1

