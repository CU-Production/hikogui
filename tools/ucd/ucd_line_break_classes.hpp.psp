// This file was generated by generate_unicode_data.py

#pragma once

#include "../utility/module.hpp"
#include <cstdint>
#include <optional>

// Windows.h defines small as a macro.
#ifdef small
#undef small
#endif

namespace hi {
inline namespace v1 {
namespace detail {

constexpr auto ucd_line_break_classes_chunk_size = $chunk_size$_uz;
constexpr auto ucd_line_break_classes_index_width = $index_width$_uz;
constexpr auto ucd_line_break_classes_indices_size = $indices_size$_uz;
constexpr auto ucd_line_break_class_width = $line_break_class_width$_uz;

static_assert(std::has_single_bit(ucd_line_break_classes_chunk_size));

constexpr uint8_t ucd_line_break_classes_indices_bytes[$len(indices_bytes)$] = {\
$for i, x in enumerate(indices_bytes):
    $if i % 32 == 0:

   \
    $end
$"{:3},".format(x)$
$end

};

constexpr uint8_t ucd_line_break_classes_bytes[$len(line_break_classes_bytes)$] = {\
$for i, x in enumerate(line_break_classes_bytes):
    $if i % 32 == 0:

   \
    $end
$"{:3},".format(x)$
$end

};


} // namespace detail

// Windows.h adds a "IN" macro that is used in this enum.
#ifdef IN
#undef IN
#endif

/** Unicode line break class.
 *
 * See "AUX14: Unicode line break algorithm"
 * http://unicode.org/reports/tr14/
 *
 */
enum class unicode_line_break_class : uint8_t {
    /** Mandatory Break NL, PARAGRAPH SEPARATOR Cause a line break (after)
     */
    BK = 0,

    /** Carriage Return CR Cause a line break (after), except between CR and LF
     */
    CR = 1,

    /** Line Feed LF Cause a line break (after)
     */
    LF = 2,

    /** Combining Mark Combining marks, control codes Prohibit a line break between the character and the preceding character
     */
    CM = 3,

    /** Next Line NEL Cause a line break (after)
     */
    NL = 4,

    /** Surrogate Surrogates Do not occur in well-formed text
     */
    SG = 5,

    /** Word Joiner WJ Prohibit line breaks before and after
     */
    WJ = 6,

    /** Zero Width Space ZWSP Provide a break opportunity
     */
    ZW = 7,

    /** Non-breaking (Glue) CGJ, NBSP, ZWNBSP Prohibit line breaks before and after
     */
    GL = 8,

    /** Space SPACE Enable indirect line breaks
     */
    SP = 9,

    /** Zero Width Joiner Zero Width Joiner Prohibit line breaks within joiner sequences Break Opportunities
     */
    ZWJ = 10,

    /** Break Opportunity Before and After Em dash Provide a line break opportunity before and after the character
     */
    B2 = 11,

    /** Break After Spaces, hyphens Generally provide a line break opportunity after the character
     */
    BA = 12,

    /** Break Before Punctuation used in dictionaries Generally provide a line break opportunity before the character
     */
    BB = 13,

    /** Hyphen HYPHEN-MINUS Provide a line break opportunity after the character, except in numeric context
     */
    HY = 14,

    /** Contingent Break Opportunity Inline objects Provide a line break opportunity contingent on additional information
     * Characters Prohibiting Certain Breaks
     */
    CB = 15,

    /** Close Punctuation Prohibit line breaks before
     */
    CL = 16,

    /** Close Parenthesis ')', ']' Prohibit line breaks before
     */
    CP = 17,

    /** Exclamation/Interrogation '!', '?', etc. Prohibit line breaks before
     */
    EX = 18,

    /** Inseparable Leaders Allow only indirect line breaks between pairs
     */
    IN = 19,

    /** Nonstarter. Allow only indirect line breaks before
     */
    NS = 20,

    /** Open Punctuation '(', '[', '{', etc. Prohibit line breaks after
     */
    OP = 21,

    /** Quotation Quotation marks Act like they are both opening and closing Numeric Context
     */
    QU = 22,

    /** Infix Numeric Separator . , Prevent breaks after any and before numeric
     */
    IS = 23,

    /** Numeric Digits Form numeric expressions for line breaking purposes
     */
    NU = 24,

    /** Postfix Numeric. Do not break following a numeric expression
     */
    PO = 25,

    /** Prefix Numeric. Do not break in front of a numeric expression
     */
    PR = 26,

    /** Symbols Allowing Break After / Prevent a break before, and allow a break after XX Characters
     */
    SY = 27,

    /** Ambiguous (Alphabetic or Ideographic) Characters with Ambiguous East Asian Width Act like AL when the resolved EAW
     * is N; XX wise, act as ID
     */
    AI = 28,

    /** Alphabetic Alphabets and regular symbols Are alphabetic characters or symbols that are used with alphabetic
     * characters
     */
    AL = 29,

    /** Conditional Japanese Starter Small kana Treat as NS or ID for strict or normal breaking.
     */
    CJ = 30,

    /** Emoji Base All emoji allowing modifiers Do not break from following Emoji Modifier
     */
    EB = 31,

    /** Emoji Modifier Skin tone modifiers Do not break from preceding Emoji Base
     */
    EM = 32,

    /** Hangul LV Syllable Hangul Form Korean syllable blocks
     */
    H2 = 33,

    /** Hangul LVT Syllable Hangul Form Korean syllable blocks
     */
    H3 = 34,

    /** Hebrew Letter Hebrew Do not break around a following hyphen; otherwise act as Alphabetic
     */
    HL = 35,

    /** Ideographic Ideographs Break before or after, except in some numeric context
     */
    ID = 36,

    /** Hangul
     */
    JL = 37,

    /** Jamo Conjoining jamo Form Korean syllable blocks
     */
    L = 38,

    /** Hangul
     */
    JV = 39,

    /** Jamo Conjoining jamo Form Korean syllable blocks
     */
    V = 40,

    /** Hangul
     */
    JT = 41,

    /** Jamo Conjoining jamo Form Korean syllable blocks
     */
    T = 42,

    /** Regional Indicator REGIONAL INDICATOR SYMBOL LETTER A..Z Keep pairs together.For pairs, break before and after XX
     * classes
     */
    RI = 43,

    /** Complex Context Dependent(South East Asian) South East Asian :Thai,Lao,Khmer Provide a line break opportunity
     * contingent on additional, language - specific context analysis
     */
    SA = 44,

    /** Unknown Most unassigned, private - use Have as yet unknown line breaking behavior or unassigned code positions
     */
    XX = 45
};

[[nodiscard]] constexpr unicode_line_break_class ucd_get_line_break_class(char32_t code_point) noexcept
{
    constexpr auto max_code_point_hi = detail::ucd_line_break_classes_indices_size - 1;

    auto code_point_hi = code_point / detail::ucd_line_break_classes_chunk_size;
    hilet code_point_lo = code_point % detail::ucd_line_break_classes_chunk_size;

    if (code_point_hi > max_code_point_hi) {
        code_point_hi = max_code_point_hi;
    }

    hilet chunk_index = load_bits_be<detail::ucd_line_break_classes_index_width>(
        detail::ucd_line_break_classes_indices_bytes,
        code_point_hi * detail::ucd_line_break_classes_index_width);

    // Add back in the lower-bits of the code-point.
    hilet index = (chunk_index * detail::ucd_line_break_classes_chunk_size) + code_point_lo;

    // Get the canonical combining class from the table.
    hilet value = load_bits_be<detail::ucd_line_break_class_width>(
        detail::ucd_line_break_classes_bytes, index * detail::ucd_line_break_class_width);

    return static_cast<unicode_line_break_class>(value);
}

}} // namespace hi::v1

